{"version":3,"sources":["http-common.js","services/iconify.service.js","components/home.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","title","Home","useEffect","fetchItems","useState","items","setItems","a","fetch","json","map","item","name","msg","username","className","type","placeholder","value","onChange","App","href","exact","path","component","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAEeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,iCACTC,QAAS,CACL,eAAgB,sB,GC2BT,I,sFA7BX,WACI,OAAOC,EAAKC,IAAI,Y,iBAGlB,SAAIC,GACF,OAAOF,EAAKC,IAAL,iBAAmBC,M,oBAG5B,SAAOC,GACL,OAAOH,EAAKI,KAAK,SAAUD,K,oBAG7B,SAAOD,EAAIC,GACT,OAAOH,EAAKK,IAAL,iBAAmBH,GAAMC,K,oBAGlC,SAAOD,GACL,OAAOF,EAAKM,OAAL,iBAAsBJ,M,uBAG/B,WACE,OAAOF,EAAKM,OAAL,Y,yBAGT,SAAYC,GACV,OAAOP,EAAKC,IAAL,uBAAyBM,Q,YCwBzBC,MA/Cf,WACEC,qBAAU,WACRC,MACA,IAEF,MAA0BC,mBAAU,IAApC,mBAAOC,EAAP,KAAcC,EAAd,KAEMH,EAAU,uCAAG,8BAAAI,EAAA,sEACEC,MAAM,KADR,cACXZ,EADW,gBAEGA,EAAKa,OAFR,OAEXJ,EAFW,OAGjBC,EAASD,GAHQ,2CAAH,qDAMhB,OACE,oCAEIA,EAAMK,KAAI,SAAAC,GAELA,EAAKC,KACLD,EAAKE,IACLF,EAAKG,YAKd,qBAAKC,UAAU,YAAf,SACE,qBAAKA,UAAU,4DAAf,SACE,sBAAKA,UAAU,mBAAf,UACE,gDACA,uBACEC,KAAK,OACLD,UAAU,eACVE,YAAY,GACZC,MAAM,GACNC,SAAS,gBChCfC,E,4JACJ,WACE,OACE,gCACE,qBAAKL,UAAU,2CAAf,SACE,mBAAGM,KAAK,IAAIN,UAAU,eAAtB,oBAMF,qBAAKA,UAAU,iBAAf,SACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAIC,UAAWvB,QAIrC,cAAC,EAAD,W,GAjBUwB,aAuBHL,IClBKM,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTRC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDsHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3cde824a.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n    baseURL: \"http://localhost:8081/backend/\",\r\n    headers: {\r\n        \"Content-type\": \"application/json\"\r\n    }\r\n}); ","import http from \"../http-common\";\r\n\r\nclass IconifyDataService {\r\n    getAll() {\r\n        return http.get(\"/icons\");\r\n      }\r\n    \r\n      get(id) {\r\n        return http.get(`/icons/${id}`);\r\n      }\r\n    \r\n      create(data) {\r\n        return http.post(\"/icons\", data);\r\n      }\r\n    \r\n      update(id, data) {\r\n        return http.put(`/icons/${id}`, data);\r\n      }\r\n    \r\n      delete(id) {\r\n        return http.delete(`/icons/${id}`);\r\n      }\r\n    \r\n      deleteAll() {\r\n        return http.delete(`/icons`);\r\n      }\r\n    \r\n      findByTitle(title) {\r\n        return http.get(`/icons?title=${title}`);\r\n      }\r\n}\r\n\r\nexport default new IconifyDataService();","import React, { useEffect, useState } from \"react\";\r\nimport IconifyDataService from \"../services/iconify.service\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nfunction Home() {\r\n  useEffect(() => {\r\n    fetchItems();\r\n  },[]);\r\n\r\n  const [items, setItems] = useState( [] );\r\n\r\n  const fetchItems = async() => {\r\n    const data = await fetch('/');\r\n    const items = await data.json();\r\n    setItems(items);\r\n  };\r\n\r\n  return (\r\n    <section>\r\n      {\r\n        items.map(item => {\r\n          <div>\r\n            {item.name}\r\n            {item.msg}\r\n            {item.username}\r\n          </div>\r\n          \r\n        })\r\n      }\r\n    <div className=\"container\">\r\n      <div className=\"col-md-3 d-flex justify-content-center align-items-center\">\r\n        <div className=\"input-group mb-3\">\r\n          <label>Icon Finder</label>\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"\"\r\n            value=\"\"\r\n            onChange=\"\"\r\n          />\r\n          \r\n        </div>\r\n      </div>\r\n      </div>\r\n    </section>\r\n    \r\n      \r\n      \r\n    \r\n  );\r\n}\r\nexport default Home;","import React ,{ Component } from \"react\";\nimport { Routes,Route,Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Home from './components/home.component';\n//import logo from './logo.svg';\n//import './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <a href=\"/\" className=\"navbar-brand\">\n            Home\n          </a>\n          \n        </nav>\n\n        <div className=\"container mt-3\">\n          <Routes>\n            <Route exact path=\"/\" component={Home} />\n            \n          </Routes>\n        </div>\n        <Home/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter,HashRouter } from 'react-router-dom';\n\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <HashRouter>\n    <App/>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\nserviceWorker.unregister();"],"sourceRoot":""}